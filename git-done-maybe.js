#!/usr/bin/env node

var exec = require('child_process').exec;
var path = require('path');
var fs = require('fs');

function showHelp() {
  var help = `
Usage:
  git done-maybe [--a=<author name>] [--d=<days-ago>] [--df=<date-format>] [--m] [--f] [--s] [--r] [--h]

  --a         - Specify author to restrict search to (if not specified, will return all contributors)
  --d         - Specify the number of days back to include (default: 1)
  --df	      - Specify the date format for "git log" (default: relative, options: local|default|iso|iso-strict|rfc|short|raw)
  --m         - Specify the multiple git projects search in target directory
  --f         - Fetch the latest commits beforehand
  --s         - Display stats for the commits (files changed, insertions, deletions)
  --r         - Export report for current logs to specific .txt file
  --h         - Display this help screen

Example:
  git done-maybe --a="John Doe" --d=7 --f --s
`;
  console.log(help);
}

var author,
  days,
  date_format,
  stats,
  multiple = false,
  fetch_last = false,
  report = false,
  reportData = [],
  help = false;

var msgs = {
  not_found: '.git not found in this directory!',
  something_wrong: 'Something went wrong.',
  empty: 'Seems like nothing here!',
  report: '# Report generated by git-done-maybe on',
  report_export: 'Report exported successfully to',
  filename: 'Filename needs to match: ',
  fetch: 'Fetching commits from',
  enter_name: 'Enter filename'
}

process.argv = process.argv.slice(2);

process.argv.forEach(function (arg) {
  var k = arg.split('=');

  switch (k[0]) {
    case '--a':
      author = `-i --author=${k[1]}`;
      break;
    case '--d':
      days = `${k[1] || 1}' days ago'`;
      break;
    case '--df':
      var all = ['relative', 'local', 'default', 'iso', 'iso-strict', 'rfc', 'short', 'raw'];
      date_format = !!(all.indexOf(k[1]) + 1) ? k[1] : 'relative';
      break;
    case '--m':
      multiple = true;
      break;
    case '--f':
      fetch_last = true;
      break;
    case '--s':
      stats = '--shortstat';
      break;
    case '--r':
      report = true;
      break;
    case '--h':
      help = true;
      break;
    default:
      break;
  }
});

if (help) { showHelp(); return; }
var pretty_format = `--pretty=format:'%Cred%h%Creset ### %s%Creset ### %Cgreen(%ad)%Creset ### %C(yellow)<%an>%Creset' ${stats || ''}`;
var gitLog = `git log --since=${days || '1.days'} ${pretty_format} --abbrev-commit --date=${date_format || 'relative'} ${author || ''} --no-merges`;
var gitFetch = 'git fetch --all';

function getWork(gitPath, callback) {
  fetch_last ? (
    console.log(`\x1b[32m${msgs.fetch} ${repoName(gitPath)} .. \x1b[0m`),
    executeGitFetch(gitPath, function () {
      executeGitLogWork(gitPath, function () {
        callback();
      });
    })
  ) : executeGitLogWork(gitPath, function () {
    callback();
  });
}

function executeGitFetch(gitPath, callback) {
  exec(gitFetch, { cwd: gitPath }, function (err, stdout, stderr) {
    callback();
  });
}

function executeGitLogWork(gitPath, callback) {
  exec(gitLog, { cwd: gitPath }, function (err, stdout, stderr) {
    var repo = repoName(gitPath);
    console.log('\n\x1b[4m\x1b[36m/' + repo + '\x1b[0m\n');
    reportData.push(`\n/${repo}`);
    if (!checkGitDir(gitPath)) {
      reportData.push(`\n${msgs.not_found}`);
      callback();
      return;
    }
    if (err) return console.log(`\x1b[31m${msgs.something_wrong}\x1b[0m`);

    stdout.length === 0 ? (
      console.log(`\x1b[31m${msgs.empty}\x1b[0m`),
      reportData.push(`\n${msgs.empty}`),
      callback()
    ) : (
        reportData.push(`\n${stdout}`),
        stdout = stdout.split('\n'),
        stdout.forEach(function (el) {
          var a = el.split(' ### ');
          console.log(a.join(' '));
        }, this),
        callback()
      )
  });
}

function repoName(repo) {
  var name = repo.split('/');
  return name[name.length - 1];
}

function checkGitDir(pathDir) {
  var gitPath = path.join(pathDir, '.git/HEAD');
  return !fs.existsSync(gitPath) ? (
    console.log(`\x1b[31m${msgs.not_found}\x1b[0m`),
    false
  ) : true;
}

function getSubDirectories() {
  var path = process.cwd();
  return fs.readdirSync(path).filter(function (file) {
    return fs.statSync(path + '/' + file).isDirectory();
  });
}

function exportReport(data, filename) {
  var date = new Date().toISOString().split('T')[0];
  var header = `${msgs.report} ${date}\n`;
  var formatedData = header + prepareForExport(data);

  fs.writeFileSync(`${filename}.txt`, formatedData, function (err) {
    if (err) console.log(err);
  });

  console.log(`${msgs.report_export} ${filename}.txt`);
}

function prepareForExport(data) {
  data = data.map(function (el) {
    var a = el.split(' ### ');
    return a.join(' ').replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
  }, this)

  return data.join('\n');
}

function askForFilename(question, callback) {
  var stdin = process.stdin,
    stdout = process.stdout,
    format = /^[\w\-. ]+$/;

  stdin.resume();
  stdout.write(`\n${question}: `);

  stdin.once('data', function (data) {
    data = data.toString().trim();

    if (format.test(data)) {
      callback(data);
    } else {
      console.log(msgs.filename + format);
      askForFilename(question, callback);
    }
  });
}

function checkReport() {
  if (report) {
    askForFilename(msgs.enter_name, function (filename) {
      exportReport(reportData, filename);
      process.exit();
    })
  }
}

function getMultiple(callback) {
  var directories = getSubDirectories();
  directories.forEach(function (dir) {
    if (dir !== '.git') {
      var gitPath = path.join(process.cwd(), dir);
      if (fs.existsSync(gitPath)) {
        getWork(gitPath, function () {
          if (reportData.length === directories.length * 2) {
            callback();
          }
        });
      }
    }
  })
}

if (multiple) {
  getMultiple(function () {
    checkReport();
  });
} else {
  getWork(process.cwd(), function () {
    checkReport();
  });
}
